Mintaillesztés, reguláris kifejezések
=====================================

- Escape szekvenciák

   1. \t tabulátor (HT, TAB)
   2. \n újsor (LF, NL)
   3. \r kocsi vissza (CR)
   4. \f lapdobás (FF)
   5. \a figyelmeztető hang (csengő) (BEL)
   6. \e escape (ESC)
   7. \033 oktális karakter (ESC)
   8. \x1B hexadecimális karakter (ESC)
   9. \x{263a} hosszú hexadecimális karakter (Unicode SMILEY ☺)
  10. \cK vezérlő karakter (example: VT)
  11. \N{name} megnevezett Unicode karakter
  12. \N{U+263D} Unicode karakter (FIRST QUARTER MOON)
  13. \l következő karakter kisbetűs
  14. \u következő karakter nagybetűs
  15. \L következő karakterek kisbetűsek \E -ig
  16. \U következő karakterek nagybetűsek \E -ig
  17. \E a kis- vagy nagybetűs módosítás vége
  18. \Q metakarakterek kikapcsolása \E -ig

perl -e '$_ = 'igaz'; print /\LGA\E/'		# 1
perl -e '$_ = 'IGAZ'; print /\Uga\E/'		# 1
perl -e '$_ = 'igaz'; print /\Q\w\E/'		# undef

- Karakter osztályok és speciális vezérlőkarakterek

   1. \w egy "szó" karakter ("a-zA-Z0-9_")
   2. \W egy nem szó karakter
   3. \s egy whitespace karakter
   4. \S egy nem whitespace karakter
   5. \d egy szám karakter
   6. \D egy nem szám karakter

perl -e '$_ = "\xDF"; print /^\w/'		# undef (mert nem utf-8)
perl -e '$_ = "\x{03b1}"; print /^\w/'		# 1 (mert utf-8 karakter [α])


- Mennyi lehet {n,m} értéke

perl -e '$_ **= $_ , / {$_} / for 2 .. 42'

Quantifier in {,} bigger than 32766 in regex; marked by <-- HERE in m/ { <-- HERE 46656} / at -e line 1.

- Mennyi lehet a visszahivatkozások értéke:

perl -e '$_='abcdefghijklmnopqrstuvwxyz'; /(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)/; for (1..26) {print $$_}'	# abcdefghijklmnopqrstuvwxyz

perl -e '$_='abcdefghijklmnopqrstuvwxyz'; s/(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)/$26$25$24$23$22$21$20$19$18$17$16$15$14$13$12$11$10$9$8$7$6$5$4$3$2$1/; print $_'	# zyxwvutsrqponmlkjihgfedcba

- Példa a visszahivatkozásokra

perl -e '$_ = "Ez itt egy sor"; /^(\w+)\W+((\w+)\W+(\w+))\W+(\w+)/; print "$1 $2 $5\n$1 $3 $4 $5\n"'	# "Ez itt egy sor\nEz itt egy sor"

perl -e '$_ = "Ez itt egy sor"; /\sitt\s/; print "$&"'	# " itt "
perl -e '$_ = "Ez itt egy sor"; /\sitt\s/; print "$`"'	# "Ez"
perl -e '$_ = "Ez itt egy sor"; /\sitt\s/; print "$'"'	# "egy sor"

- Példa a fordítás operátorra

perl -e '$_ = "12345678"; tr /1234/5678/; print'	# "56785678"
perl -e '$_ = "12345678"; tr /12/5678/; print'		# "56345678"
perl -e '$_ = "12345678"; tr /1234/56/; print'		# "56665678"

perl -e '$_ = "öt szép szűzlány őrült írót nyúz"; tr/áéíóöőúüű/aeiooouuu/; print'			# "aut szaop szuuzlaeny uurault auraut nyauz"

perl -Mutf8 -e '$_ = "öt szép szűzlány őrült írót nyúz"; tr/áéíóöőúüű/aeiooouuu/; print'	# "ot szep szuzlany orult irot nyuz"

- Példa a split függvényre

perl -e '$_ = "Ez egy sor"; @lista = split / /; print scalar @lista'	# 3
perl -e '$_ = "Ez egy sor"; @lista = split /( )/; print scalar @lista'	# 5


